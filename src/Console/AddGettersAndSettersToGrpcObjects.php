<?php

namespace FrockDev\ToolsForLaravel\Console;

use Illuminate\Console\Command;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;

class AddGettersAndSettersToGrpcObjects extends Command
{

    protected $signature = 'frock:add-getters-setter-to-grpc-classes';

    public function handle() {
        // this method should check all generated classes extends Google\Protobuf\Internal\Message
        // and add magic getters and setters which will proxy field call to real getter or setter call

        foreach (scandir('/var/www/php/protoGenerated/') as $serviceDir) {
            if ($serviceDir === '.' || $serviceDir === '..' || !is_dir('/var/www/php/protoGenerated/' . $serviceDir)) continue;
            // это сервисы

            foreach (scandir('/var/www/php/protoGenerated/' . $serviceDir) as $versionDir) {
                // это версии обслуживаемых подсеврисов
                if ($versionDir === '.' || $versionDir === '..' || !is_dir('/var/www/php/protoGenerated/' . $serviceDir . '/' . $versionDir)) continue;


                foreach (scandir('/var/www/php/protoGenerated/' . $serviceDir . '/' . $versionDir) as $filePath) {
                    if ($filePath === '.' || $filePath === '..' || is_dir('/var/www/php/protoGenerated/' . $serviceDir . '/' . $versionDir . '/' . $filePath)) continue;

                    $file = file_get_contents('/var/www/php/protoGenerated/' . $serviceDir . '/' . $versionDir . '/' . $filePath);
                    $namespaceRegularExp = '/namespace (.*);/';
                    preg_match($namespaceRegularExp, $file, $matches);
                    if (!isset($matches[1])) {
                        throw new \Exception('Namespace not found in proto file. Don\'t forget write in file "namespace <namespace_name>;"');
                    }
                    $namespace = $matches[1];
                    $namepaceObject = new PhpNamespace($namespace);

                    /** @var ClassType $class */
                    $class = ClassType::fromCode($file);
                    $namepaceObject->add($class);

                    if ($class->getExtends() != \Google\Protobuf\Internal\Message::class) {
                        continue;
                    }

                    if (!$class->hasMethod('__set')) {
                        //method should call setter. Setter is already here, concatenated from "set" and field name capitalized
                        $method = $class->addMethod('__set');
                            $method->setBody('return $this->{\'set\'.ucfirst($name)}($value);')
                            ->addParameter('name')
                            ->setType('string')
                            ->setNullable(false);
                            $method->addParameter('value')
                            ->setType('mixed')
                            ->setNullable(false);

                    }

                    if (!$class->hasMethod('__get')) {
                        //same here
                        $method = $class->addMethod('__get');
                            $method->setBody('return $this->{\'get\'.ucfirst($name)}();')
                            ->addParameter('name')
                            ->setType('string')
                            ->setNullable(false);
                    }
                    $this->putNamespaceToFile($namepaceObject, '/var/www/php/protoGenerated/' . $serviceDir . '/' . $versionDir . '/' . $filePath);

                }
            }
        }

    }

    /**
     * @param PhpNamespace $namespace
     * @param string $path
     * @return void
     */
    protected function putNamespaceToFile(PhpNamespace $namespace, string $path): string {
        $file = new \Nette\PhpGenerator\PhpFile;
        $file->addComment('This file is generated by Frocker. Do not edit it manually.');
        $file->addNamespace($namespace);

        @mkdir(dirname($path), recursive: true);
        file_put_contents($path, $file);

        return $file;
    }
}

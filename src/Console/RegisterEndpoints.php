<?php

namespace FrockDev\ToolsForLaravel\Console;

use FrockDev\ToolsForLaravel\InterceptorInterfaces\PostInterceptorInterface;
use FrockDev\ToolsForLaravel\InterceptorInterfaces\PreInterceptorInterface;
use Illuminate\Console\Command;
use Illuminate\Support\ServiceProvider;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;

class RegisterEndpoints extends Command
{
    protected $signature = 'frock:register-endpoints';

    public function handle() {
        //  классы пойдут как синглтоны
        $registerAllEndpointsBody = '';
        $serviceProviderNamespace = new PhpNamespace('App\\Providers');
        foreach (scandir(app_path().'/Modules') as $module) {
            if ($module === '.' || $module === '..' || !is_dir(app_path().'/Modules/'.$module)) {
                continue;
            }

            foreach (scandir(app_path().'/Modules/'.$module.'/Endpoints') as $version) {
                if ($version === '.' || $version === '..' || !is_dir(app_path() . '/Modules/' . $module . '/Endpoints/' . $version)) {
                    continue;
                }

                foreach (scandir(app_path() . '/Modules/' . $module . '/Endpoints/' . $version) as $endpoint) {
                    if ($endpoint === '.' || $endpoint === '..' || !is_file(app_path() . '/Modules/' . $module . '/Endpoints/' . $version . '/' . $endpoint)) {
                        continue;
                    }

                    $reflectionClass = new \ReflectionClass('App\\Modules\\'.$module.'\\Endpoints\\'.$version.'\\'.substr($endpoint, 0, -4));
                    $registerAllEndpointsBody.='$this->app->singleton(\\'.$reflectionClass->getName().'::class, function($app) {'."\n";
                    $registerAllEndpointsBody .= "\t".'$object = $app->make(\\'.$reflectionClass->getName().'::class);'."\n";
                    $serviceProviderNamespace->addUse($reflectionClass->getName());


                    foreach ($reflectionClass->getMethods() as $method) {
                        if ($method->getName()!='run') continue;

                        foreach ($method->getAttributes() as $attribute) {
                            $attributeInstance = $attribute->newInstance();
                            $arrayOfParams = $this->getArrayOfParams($attributeInstance, $attribute);
                            if ($attributeInstance instanceof PreInterceptorInterface) {
                                if (!empty($arrayOfParams)) {
                                    $registerAllEndpointsBody.="\t".'$object->addPreInterceptor($app->make(\\'.$attributeInstance::class.'::class, '.$arrayOfParams.'));'."\n";
                                } else {
                                    $registerAllEndpointsBody.="\t".'$object->addPreInterceptor($app->make(\\'.$attributeInstance::class.'::class));'."\n";
                                }
                                $serviceProviderNamespace->addUse($attributeInstance::class);
                            }
                            if ($attributeInstance instanceof PostInterceptorInterface) {
                                if (!empty($arrayOfParams)) {
                                    $registerAllEndpointsBody.="\t".'$object->addPostInterceptor($app->make(\\'.$attributeInstance::class.'::class, '.$arrayOfParams.'));'."\n";
                                } else {
                                    $registerAllEndpointsBody.="\t".'$object->addPostInterceptor($app->make(\\'.$attributeInstance::class.'::class));'."\n";
                                }
                                $serviceProviderNamespace->addUse($attributeInstance::class);
                            }
                        }
                    }
                    $registerAllEndpointsBody.="\n\t".'return $object;'."\n".'});'."\n";
                }

            }
        }

        $serviceProvider = new ClassType('EndpointsServiceProvider');

        $serviceProvider->addMethod('register')
            ->setPublic()
            ->setBody($registerAllEndpointsBody)
            ->setComment('This file is autogenerated by Frock.Dev. Do not edit it manually.');
        $serviceProvider->setExtends(ServiceProvider::class);
        $serviceProviderNamespace->add($serviceProvider);
        $serviceProvider->addComment('This file is autogenerated by Frock.Dev. Do not edit it manually.');
        file_put_contents(app_path().'/Providers/EndpointsServiceProvider.php', "<?php\n\n".$serviceProviderNamespace);

        $this->addEndpointServiceProviderToConfig();

    }

    private function varexport($expression, $return=FALSE) {
        $export = var_export($expression, TRUE);
        $export = preg_replace("/^([ ]*)(.*)/m", '$1$1$2', $export);
        $array = preg_split("/\r\n|\n|\r/", $export);
        $array = preg_replace(["/\s*array\s\($/", "/\)(,)?$/", "/\s=>\s$/"], [NULL, ']$1', ' => ['], $array);

        $export = join(PHP_EOL, array_filter(["["] + $array));
        if ((bool)$return) {
            return $export;
        } else {
            echo $export;
        }
    }

    /**
     * This method should check if EndpointServiceProvider is registered in app.php. If not - add it near the AppServiceProvider.
     * @return void
     */
    private function addEndpointServiceProviderToConfig()
    {
        $appConfig = file_get_contents(config_path().'/app.php');
        if (!str_contains($appConfig, "App\Providers\AppServiceProvider::class,\n\t\tApp\Providers\EndpointsServiceProvider::class,")) {
            $appConfig = str_replace('App\Providers\AppServiceProvider::class,', "App\Providers\AppServiceProvider::class,\n\t\tApp\Providers\EndpointsServiceProvider::class,", $appConfig);
            file_put_contents(config_path().'/app.php', $appConfig);
        }
    }

    private function getArrayOfParams($attributeInstance, $attribute)
    {
        $attributeReflection = new \ReflectionClass($attributeInstance);
        //we need to get array of names of constructor parameters of $attributeReflection
        $attributeConstructor = $attributeReflection->getConstructor();
        if (is_null($attributeConstructor)) {
            return [];
        }
        $attributeConstructorParams = $attributeConstructor->getParameters();
        $attributeConstructorParamsNames = [];
        foreach ($attributeConstructorParams as $attributeConstructorParam) {
            $attributeConstructorParamsNames[] = $attributeConstructorParam->getName();
        }
        $arrayOfParams = '[';
        $i=0;
        foreach ($attribute->getArguments() as $argument) {
            $arrayOfParams.="'".$attributeConstructorParamsNames[$i]."'".'=>'.$this->varexport($argument, true).',';
            $i++;
        }
        $arrayOfParams.=']';
        return $arrayOfParams;
    }
}
